import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import  API_URL  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
import requests
import asyncio
import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

BASE_URL = API_URL  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API URL
REGISTER_URL = BASE_URL + 'users/api/register/'  # URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
FLOWERS_URL = BASE_URL + 'shop/api/flowers/'  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
CREATE_ORDER_URL = BASE_URL + 'api/orders/'  # URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(username, email, password):
    data = {
        'username': username,
        'email': email,
        'password1': password,
        'password2': password
    }

    response = requests.post(REGISTER_URL, data=data)
    if response.status_code == 201:
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!'
    else:
        return f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.json()}'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
def get_catalog():
    response = requests.get(FLOWERS_URL)
    if response.status_code == 200:
        flowers = response.json()
        catalog = "–ö–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤:\n"
        for flower in flowers:
            catalog += f"{flower['name']} - {flower['price']} —Ä—É–±. - {flower['description']}\n"
        return catalog
    else:
        return f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {response.status_code}'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
def create_order(user_token, flower_id):
    headers = {
        'Authorization': f'Token {user_token}'  # –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    }
    data = {
        'flower_id': flower_id
    }
    response = requests.post(CREATE_ORDER_URL, headers=headers, data=data)
    if response.status_code == 201:
        return '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!'
    else:
        return f'–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.json()}'


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDelivery! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command('register'))
async def register(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Email, –ü–∞—Ä–æ–ª—å")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(lambda message: ',' in message.text)
async def handle_registration(message: Message):
    user_data = message.text.split(',')
    if len(user_data) == 3:
        username, email, password = [x.strip() for x in user_data]
        result = register_user(username, email, password)
        await message.answer(result)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Email, –ü–∞—Ä–æ–ª—å")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.message(Command('catalog'))
async def show_catalog(message: Message):
    catalog = get_catalog()
    await message.answer(catalog)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command('new_order'))
async def new_order(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ü–≤–µ—Ç–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.text.isdigit())
async def handle_order_id(message: Message):
    flower_id = message.text
    user_token = 'your_user_token_here'  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = create_order(user_token, flower_id)
    await message.answer(result)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
async def get_orders():
    async with aiohttp.ClientSession() as session:
        async with session.get(BASE_URL + "api/orders/") as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_new_order(order_data):
    message = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_data['id']} –æ—Ç {order_data['user']}"
    await bot.send_message(chat_id='CHAT_ID', text=message)


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üîë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), KeyboardButton(text="üö™ –í–æ–π—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDelivery! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@dp.message(Command('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
async def register_user(message: Message):
    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: email –ø–∞—Ä–æ–ª—å")

@dp.message(lambda message: len(message.text.split()) == 2)
async def handle_registration(message: Message):
    email, password = message.text.split()
    response = requests.post(f"{API_URL}/register/", data={'email': email, 'password': password})
    if response.status_code == 201:
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu())
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.message(Command('–ö–∞—Ç–∞–ª–æ–≥'))
async def catalog(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/catalog/") as response:
            if response.status == 200:
                catalog_data = await response.json()
                catalog_items = "\n".join([f"{item['name']} - {item['price']} —Ä—É–±." for item in catalog_data])
                await message.answer(f"–ö–∞—Ç–∞–ª–æ–≥:\n{catalog_items}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥.")

# –ö–æ–º–∞–Ω–¥–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message(Command('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
async def new_order(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ü–≤–µ—Ç–∫–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

@dp.message(lambda message: message.text.isdigit())
async def handle_order(message: Message):
    flower_id = message.text
    headers = {
        'Authorization': f'Token {user_token}',  # –ó–¥–µ—Å—å –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–µ
    }
    response = requests.post(f"{API_URL}/orders/", headers=headers, data={'flower_id': flower_id})
    if response.status_code == 201:
        await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())



